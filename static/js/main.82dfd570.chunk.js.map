{"version":3,"sources":["todos.js","addForm.js","App.js","serviceWorker.js","index.js"],"names":["Todos","todos","deleteTodos","todoList","length","map","todo","className","key","id","onClick","content","Addtodo","state","handleChange","e","setState","target","value","handleSubmit","preventDefault","props","addTodo","onSubmit","this","type","onChange","Component","App","filter","Math","random","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"8MAuBeA,EArBD,SAAC,GAA4B,IAA1BC,EAAyB,EAAzBA,MAAOC,EAAkB,EAAlBA,YAChBC,EAAWF,EAAMG,OACrBH,EAAMI,KAAI,SAACC,GACT,OACE,yBAAKC,UAAU,kBAAkBC,IAAKF,EAAKG,IACzC,0BACEC,QAAS,WACPR,EAAYI,EAAKG,MAGlBH,EAAKK,aAMd,uBAAGJ,UAAU,UAAb,gCAEF,OAAO,yBAAKA,UAAU,oBAAoBJ,ICgB7BS,E,4MAjCbC,MAAQ,CACNF,QAAS,I,EAGXG,aAAe,SAACC,GACd,EAAKC,SAAS,CACZL,QAASI,EAAEE,OAAOC,S,EAItBC,aAAe,SAACJ,GACdA,EAAEK,iBACF,EAAKC,MAAMC,QAAQ,EAAKT,OACxB,EAAKG,SAAS,CACZL,QAAS,M,uDAIX,OACE,6BACE,0BAAMY,SAAUC,KAAKL,cACnB,+CACA,2BACEM,KAAK,OACLC,SAAUF,KAAKV,aACfI,MAAOM,KAAKX,MAAMF,gB,GA1BRgB,aCoCPC,E,4MAjCbf,MAAQ,CACNZ,MAAO,CACL,CAAEQ,GAAI,EAAGE,QAAS,iBAClB,CAAEF,GAAI,EAAGE,QAAS,e,EAGtBT,YAAc,SAACO,GACb,IAAMR,EAAQ,EAAKY,MAAMZ,MAAM4B,QAAO,SAACvB,GACrC,OAAOA,EAAKG,KAAOA,KAErB,EAAKO,SAAS,CACZf,MAAOA,K,EAIXqB,QAAU,SAAChB,GACTA,EAAKG,GAAKqB,KAAKC,SACf,IAAI9B,EAAK,sBAAO,EAAKY,MAAMZ,OAAlB,CAAyBK,IAClC,EAAKU,SAAS,CACZf,W,uDAIF,OACE,yBAAKM,UAAU,sBACb,wBAAIA,UAAU,oBAAd,UACA,kBAAC,EAAD,CAAMN,MAAOuB,KAAKX,MAAMZ,MAAOC,YAAasB,KAAKtB,cACjD,kBAAC,EAAD,CAASoB,QAASE,KAAKF,e,GA5BbK,aCQEK,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a","file":"static/js/main.82dfd570.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\nconst Todos = ({ todos, deleteTodos }) => {\r\n  const todoList = todos.length ? (\r\n    todos.map((todo) => {\r\n      return (\r\n        <div className=\"collection-item\" key={todo.id}>\r\n          <span\r\n            onClick={() => {\r\n              deleteTodos(todo.id);\r\n            }}\r\n          >\r\n            {todo.content}\r\n          </span>\r\n        </div>\r\n      );\r\n    })\r\n  ) : (\r\n    <p className=\"center\"> you have no todo left ! yay</p>\r\n  );\r\n  return <div className=\"todos collection\">{todoList}</div>;\r\n};\r\n\r\nexport default Todos;\r\n","import React, { Component } from \"react\";\r\n\r\nclass Addtodo extends Component {\r\n  state = {\r\n    content: \"\",\r\n  };\r\n\r\n  handleChange = (e) => {\r\n    this.setState({\r\n      content: e.target.value,\r\n    });\r\n  };\r\n\r\n  handleSubmit = (e) => {\r\n    e.preventDefault();\r\n    this.props.addTodo(this.state);\r\n    this.setState({\r\n      content: \"\",\r\n    });\r\n  };\r\n  render() {\r\n    return (\r\n      <div>\r\n        <form onSubmit={this.handleSubmit}>\r\n          <label>Add new Todo</label>\r\n          <input\r\n            type=\"text\"\r\n            onChange={this.handleChange}\r\n            value={this.state.content}\r\n          />\r\n        </form>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Addtodo;\r\n","import React, { Component } from \"react\";\r\nimport Todo from \"./todos\";\r\nimport Addtodo from \"./addForm\";\r\n\r\nclass App extends Component {\r\n  state = {\r\n    todos: [\r\n      { id: 1, content: \"buy some milk\" },\r\n      { id: 2, content: \"play pubg\" },\r\n    ],\r\n  };\r\n  deleteTodos = (id) => {\r\n    const todos = this.state.todos.filter((todo) => {\r\n      return todo.id !== id;\r\n    });\r\n    this.setState({\r\n      todos: todos,\r\n    });\r\n  };\r\n\r\n  addTodo = (todo) => {\r\n    todo.id = Math.random();\r\n    let todos = [...this.state.todos, todo];\r\n    this.setState({\r\n      todos,\r\n    });\r\n  };\r\n  render() {\r\n    return (\r\n      <div className=\"todo-app container\">\r\n        <h1 className=\"center blue-text\">Todo;s</h1>\r\n        <Todo todos={this.state.todos} deleteTodos={this.deleteTodos} />\r\n        <Addtodo addTodo={this.addTodo} />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}